pipeline {

    agent any
 
    environment {

        SONARQUBE_SCANNER = 'SonarScanner' // Jenkins > Global Tool Configuration ismi
        PROJECT_KEY = 'ConsoleApp'

        PROJECT_NAME = 'Console App'

    }   

    stages {
        stage('BOM Check & Lint') {
                steps {
                    echo 'üîç Running BOM and Lint checks...'
                    sh 'chmod +x ./ci-check.sh'
                    sh './ci-check.sh'
                }
            }

        stage('Checkout') {

            steps {

                script {

                 checkout scmGit(

                        branches: [[name: 'main']],

                        userRemoteConfigs: [[url: 'https://github.com/efeturkyilmazz/consoleapp.git']])

                }

            }

		}
 
		stage('Restore') {

			steps {

				sh 'dotnet restore'

			}

		}

 
        stage('SonarQube Analysis Begin') {

            steps {

                

                    withSonarQubeEnv('SonarQubeServer') {

                        sh """
                        echo "üîß Installing dotnet-sonarscanner (if not exists)..."
                            dotnet tool install --global sonarscanner || true
                            echo "step 2"
                            export PATH="\$PATH:/root/.dotnet/tools"
                            
                    echo "üöÄ Starting SonarQube analysis..."
                    dotnet sonarscanner begin \
                        /k:"'"${PROJECT_KEY}"'" \
                        /n:"'"${PROJECT_NAME}"'"

                        """

                    }

                

            }

        }
 
        stage('Build') {

            steps {

                sh 'dotnet build --configuration Release'

            }

        }
 
 stage('SonarQube Analysis End') {
    steps {
        
                    withSonarQubeEnv('SonarQubeServer') {
                sh '''
                    echo "üì¶ Finalizing SonarQube analysis..."
                    export PATH="$PATH:/root/.dotnet/tools"
                    dotnet sonarscanner end 
                '''
            }
        
    }
}

 
        stage('Wait for Quality Gate') {

            steps {

                timeout(time: 2, unit: 'MINUTES') {

                    waitForQualityGate abortPipeline: true

                }

            }

        }

    }
 


}

 