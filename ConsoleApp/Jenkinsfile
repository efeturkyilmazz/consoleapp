pipeline { 
    agent any
    environment {
        PROJECT_KEY = 'ConsoleApp'
        PROJECT_NAME = 'Console App'
        SONAR_TOKEN = credentials('a')
        DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 'true'
    }
    stages {
        stage('Install .NET SDK') {
            steps {
                sh '''
                # .NET SDK'nın yüklü olup olmadığını kontrol et
                if ! command -v dotnet &> /dev/null; then
                    echo ".NET SDK yükleniyor..."
                    # Microsoft package signing key'i ekle
                    wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                    dpkg -i packages-microsoft-prod.deb
                    rm packages-microsoft-prod.deb
                    # Package listesini güncelle
                    apt-get update
                    # .NET SDK'yı yükle
                    apt-get install -y dotnet-sdk-8.0
                else
                    echo ".NET SDK zaten yüklü"
                    dotnet --version
                fi
                '''
            }
        }
        stage('BOM Check & Lint') {
            steps {
                echo 'Running BOM and Lint checks...'
                sh 'chmod +x ./ci-check.sh'
                sh './ci-check.sh'
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scmGit(
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/efeturkyilmazz/consoleapp.git']])
                }
            }
        }
        stage('Restore') {
            steps {
                sh 'dotnet restore'
            }
        }
        stage('SonarQube Analysis Begin') {
            steps {
                withCredentials([string(credentialsId: 'a', variable: 'a')]) {
                    withSonarQubeEnv('a') {
                        sh """
                        # dotnet-sonarscanner'ı global olarak yükle
                        dotnet tool install --global dotnet-sonarscanner || true
                        # PATH'e dotnet tools'u ekle
                        export PATH="$PATH:$HOME/.dotnet/tools"
                        # SonarQube analizi başlat
                        dotnet sonarscanner begin \
                          /k:"${PROJECT_KEY}" \
                          /n:"${PROJECT_NAME}" \
                          /d:sonar.login=${a}
                        """
                    }
                }
            }
        }
        stage('Build') {
            steps {
                sh 'dotnet build --configuration Release'
            }
        }
        stage('SonarQube Analysis End') {
            steps {
                withCredentials([string(credentialsId: 'a', variable: 'a')]) {
                    withSonarQubeEnv('a') {
                        sh """
                        # PATH'e dotnet tools'u ekle
                        export PATH="$PATH:$HOME/.dotnet/tools"
                        # SonarQube analizi bitir
                        dotnet sonarscanner end /d:sonar.login=${a}
                        """
                    }
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
}