pipeline {

    agent any
 
    environment {

        PROJECT_KEY = 'ConsoleApp'
        PROJECT_NAME = 'Console App'

    }   

    stages {
        stage('BOM Check & Lint') {
            steps {
                echo 'Running BOM and Lint checks...'
                sh 'chmod +x ./ci-check.sh'
                sh './ci-check.sh'
            }
        }

        stage('Checkout') {
            steps {
                script {
                 checkout scmGit(
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/efeturkyilmazz/consoleapp.git']])

                }
            }
		}
 
		stage('Restore') {
			steps {
				sh 'dotnet restore'

			}
		}

        stage('SonarQube Analysis Begin') {

            steps {
            withCredentials([string(credentialsId: 'SONAR_AUTH_TOKEN', variable: 'SONAR_AUTH_TOKEN')]){
                    withSonarQubeEnv('MySonarQubeServer') {

                        sh """
                echo Installing dotnet-sonarscanner...
                dotnet tool install --global dotnet-sonarscanner || true
                set PATH=%PATH%;%USERPROFILE%\\.dotnet\\tools
                dotnet sonarscanner begin ^
                    /k:"${PROJECT_KEY}" ^
                    /n:"${PROJECT_NAME}" ^
                    /d:sonar.login=${SONAR_AUTH_TOKEN}
                """
                }
              }              
           }
        }
 
        stage('Build') {

            steps {

                sh 'dotnet build --configuration Release'
            }
        }

         stage('SonarQube Analysis End') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_AUTH_TOKEN', variable: 'SONAR_AUTH_TOKEN')]) {
                    withSonarQubeEnv('MySonarQubeServer') {
                    sh """
                    set PATH=%PATH%;%USERPROFILE%\\.dotnet\\tools
                    dotnet sonarscanner end /d:sonar.login=${SONAR_AUTH_TOKEN}
                    """
                    }
                 }       
             }
        }

        stage('Wait for Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}