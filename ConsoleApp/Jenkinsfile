pipeline {
    agent any
 
    environment {
        PROJECT_KEY = 'ConsoleApp'
        PROJECT_NAME = 'Console App'
        SONAR_TOKEN= credentials('a')
    }   
    
    stages {
        stage('BOM Check & Lint') {
            steps {
                echo 'Running BOM and Lint checks...'
                sh 'chmod +x ./ci-check.sh'
                sh './ci-check.sh'
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    checkout scmGit(
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/efeturkyilmazz/consoleapp.git']])
                }
            }
        }
 
        stage('Restore') {
            steps {
                sh 'dotnet restore'
            }
        }
        
        stage('SonarQube Analysis Begin') {
            steps {
                withCredentials([string(credentialsId: 'a', variable: 'a')]) {
                    withSonarQubeEnv('a') {
                        sh """
                        dotnet tool install --global dotnet-sonarscanner || true
                        set PATH=%PATH%;%USERPROFILE%\\.dotnet\\tools
                        dotnet sonarscanner begin ^
                          /k:"${PROJECT_KEY}" ^
                          /n:"${PROJECT_NAME}" ^
                          /d:sonar.login=${a}
                        """
                    }
                }              
            }
        }
 
        stage('Build') {
            steps {
                sh 'dotnet build --configuration Release'
            }
        }
        
        stage('SonarQube Analysis End') {
            steps {
                withCredentials([string(credentialsId: 'a', variable: 'a')]) {
                    withSonarQubeEnv('a') {
                        sh """
                        set PATH=%PATH%;%USERPROFILE%\\.dotnet\\tools
                        dotnet sonarscanner end /d:sonar.login=${a}
                        """
                    }
                }       
            }
        }
        
       stage("Quality Gate") {
    steps {
        timeout(time: 1, unit: 'MINUTES') {
            script {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }
    }
}
